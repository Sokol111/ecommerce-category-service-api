// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new category
	// (POST /category/create)
	CreateCategory(c *gin.Context)
	// Get a category by ID
	// (GET /category/get/{id})
	GetCategoryById(c *gin.Context, id string)
	// Get a list of all categories
	// (GET /category/list)
	GetAll(c *gin.Context)
	// Update an existing category
	// (PUT /category/update)
	UpdateCategory(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateCategory operation middleware
func (siw *ServerInterfaceWrapper) CreateCategory(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateCategory(c)
}

// GetCategoryById operation middleware
func (siw *ServerInterfaceWrapper) GetCategoryById(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCategoryById(c, id)
}

// GetAll operation middleware
func (siw *ServerInterfaceWrapper) GetAll(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAll(c)
}

// UpdateCategory operation middleware
func (siw *ServerInterfaceWrapper) UpdateCategory(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateCategory(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/category/create", wrapper.CreateCategory)
	router.GET(options.BaseURL+"/category/get/:id", wrapper.GetCategoryById)
	router.GET(options.BaseURL+"/category/list", wrapper.GetAll)
	router.PUT(options.BaseURL+"/category/update", wrapper.UpdateCategory)
}

type CreateCategoryRequestObject struct {
	Body *CreateCategoryJSONRequestBody
}

type CreateCategoryResponseObject interface {
	VisitCreateCategoryResponse(w http.ResponseWriter) error
}

type CreateCategory200JSONResponse CategoryResponse

func (response CreateCategory200JSONResponse) VisitCreateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateCategory400ApplicationProblemPlusJSONResponse Problem

func (response CreateCategory400ApplicationProblemPlusJSONResponse) VisitCreateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateCategory500ApplicationProblemPlusJSONResponse Problem

func (response CreateCategory500ApplicationProblemPlusJSONResponse) VisitCreateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryByIdRequestObject struct {
	Id string `json:"id"`
}

type GetCategoryByIdResponseObject interface {
	VisitGetCategoryByIdResponse(w http.ResponseWriter) error
}

type GetCategoryById200JSONResponse CategoryResponse

func (response GetCategoryById200JSONResponse) VisitGetCategoryByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryById404ApplicationProblemPlusJSONResponse Problem

func (response GetCategoryById404ApplicationProblemPlusJSONResponse) VisitGetCategoryByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryById500ApplicationProblemPlusJSONResponse Problem

func (response GetCategoryById500ApplicationProblemPlusJSONResponse) VisitGetCategoryByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllRequestObject struct {
}

type GetAllResponseObject interface {
	VisitGetAllResponse(w http.ResponseWriter) error
}

type GetAll200JSONResponse []CategoryResponse

func (response GetAll200JSONResponse) VisitGetAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAll500ApplicationProblemPlusJSONResponse Problem

func (response GetAll500ApplicationProblemPlusJSONResponse) VisitGetAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCategoryRequestObject struct {
	Body *UpdateCategoryJSONRequestBody
}

type UpdateCategoryResponseObject interface {
	VisitUpdateCategoryResponse(w http.ResponseWriter) error
}

type UpdateCategory200JSONResponse CategoryResponse

func (response UpdateCategory200JSONResponse) VisitUpdateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCategory400ApplicationProblemPlusJSONResponse Problem

func (response UpdateCategory400ApplicationProblemPlusJSONResponse) VisitUpdateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCategory412ApplicationProblemPlusJSONResponse Problem

func (response UpdateCategory412ApplicationProblemPlusJSONResponse) VisitUpdateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCategory500ApplicationProblemPlusJSONResponse Problem

func (response UpdateCategory500ApplicationProblemPlusJSONResponse) VisitUpdateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create a new category
	// (POST /category/create)
	CreateCategory(ctx context.Context, request CreateCategoryRequestObject) (CreateCategoryResponseObject, error)
	// Get a category by ID
	// (GET /category/get/{id})
	GetCategoryById(ctx context.Context, request GetCategoryByIdRequestObject) (GetCategoryByIdResponseObject, error)
	// Get a list of all categories
	// (GET /category/list)
	GetAll(ctx context.Context, request GetAllRequestObject) (GetAllResponseObject, error)
	// Update an existing category
	// (PUT /category/update)
	UpdateCategory(ctx context.Context, request UpdateCategoryRequestObject) (UpdateCategoryResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CreateCategory operation middleware
func (sh *strictHandler) CreateCategory(ctx *gin.Context) {
	var request CreateCategoryRequestObject

	var body CreateCategoryJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCategory(ctx, request.(CreateCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateCategoryResponseObject); ok {
		if err := validResponse.VisitCreateCategoryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCategoryById operation middleware
func (sh *strictHandler) GetCategoryById(ctx *gin.Context, id string) {
	var request GetCategoryByIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCategoryById(ctx, request.(GetCategoryByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCategoryById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCategoryByIdResponseObject); ok {
		if err := validResponse.VisitGetCategoryByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAll operation middleware
func (sh *strictHandler) GetAll(ctx *gin.Context) {
	var request GetAllRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAll(ctx, request.(GetAllRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAll")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllResponseObject); ok {
		if err := validResponse.VisitGetAllResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateCategory operation middleware
func (sh *strictHandler) UpdateCategory(ctx *gin.Context) {
	var request UpdateCategoryRequestObject

	var body UpdateCategoryJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateCategory(ctx, request.(UpdateCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateCategoryResponseObject); ok {
		if err := validResponse.VisitUpdateCategoryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
